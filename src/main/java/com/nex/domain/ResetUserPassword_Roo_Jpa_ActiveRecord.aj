// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.nex.domain;

import com.nex.domain.ResetUserPassword;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ResetUserPassword_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext(unitName = "puPsyartists")
    transient EntityManager ResetUserPassword.entityManager;
    
    public static final EntityManager ResetUserPassword.entityManager() {
        EntityManager em = new ResetUserPassword().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long ResetUserPassword.countResetUserPasswords() {
        return entityManager().createQuery("SELECT COUNT(o) FROM ResetUserPassword o", Long.class).getSingleResult();
    }
    
    public static List<ResetUserPassword> ResetUserPassword.findAllResetUserPasswords() {
        return entityManager().createQuery("SELECT o FROM ResetUserPassword o", ResetUserPassword.class).getResultList();
    }
    
    public static ResetUserPassword ResetUserPassword.findResetUserPassword(Long id) {
        if (id == null) return null;
        return entityManager().find(ResetUserPassword.class, id);
    }
    
    public static List<ResetUserPassword> ResetUserPassword.findResetUserPasswordEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM ResetUserPassword o", ResetUserPassword.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void ResetUserPassword.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void ResetUserPassword.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ResetUserPassword attached = ResetUserPassword.findResetUserPassword(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void ResetUserPassword.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void ResetUserPassword.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public ResetUserPassword ResetUserPassword.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        ResetUserPassword merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
